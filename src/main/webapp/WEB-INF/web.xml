<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
  http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd">

	<display-name>Spring OPI</display-name>

	<description>Spring OPI application</description>

	<!-- - Key of the system property that should specify the root directory 
		of this - web app. Applied by WebAppRootListener or Log4jConfigListener. -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>opi.root</param-value>
	</context-param>

	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>production</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>heroku</param-value>
	</context-param>

	<!-- - Location of the Log4J config file, for initialization and refresh 
		checks. - Applied by Log4jConfigListener. -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:/log4j.properties</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:/META-INF/spring/applicationContext-spring3.xml
			classpath:/META-INF/spring/applicationContext-hibernate.xml
			classpath:/META-INF/spring/applicationContext-spring-security.xml
		</param-value>
	</context-param>

	<!-- - Configures Log4J for this web app. - As this context specifies a 
		context-param "log4jConfigLocation", its file path - is used to load the 
		Log4J configuration, including periodic refresh checks. - - Would fall back 
		to default Log4J initialization (non-refreshing) if no special - context-params 
		are given. - - Exports a "web app root key", i.e. a system property that 
		specifies the root - directory of this web app, for usage in log file paths. 
		- This web app specifies "petclinic.root" (see log4j.properties file). -->
	<!-- Leave the listener commented-out if using JBoss -->
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>

	<!-- - Loads the root application context of this web app at startup, - 
		by default from "/WEB-INF/applicationContext.xml". - Note that you need to 
		fall back to Spring's ContextLoaderServlet for - J2EE servers that do not 
		follow the Servlet 2.4 initialization order. - - Use WebApplicationContextUtils.getWebApplicationContext(servletContext) 
		- to access it anywhere in the web application, outside of the framework. 
		- - The root context is the parent of all servlet-specific contexts. - This 
		means that its beans are automatically available in these child contexts, 
		- both for getBean(name) calls and (external) bean references. -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- - Servlet that dispatches request to registered handlers (Controller 
		implementations). - Has its own application context, by default defined in 
		"{servlet-name}-servlet.xml", - i.e. "petclinic-servlet.xml". - - A web app 
		can contain any number of such servlets. - Note that this web app has a shared 
		root application context, serving as parent - of all DispatcherServlet contexts. -->
	<servlet>
		<servlet-name>opi</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>dwr-invoker</servlet-name>
		<!-- display-name DWR Servlet display-name -->
		<servlet-class>
			org.directwebremoting.servlet.DwrServlet
		</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>crossDomainSessionSecurity</param-name>
			<param-value>false</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>dwr-invoker</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>

	<!-- - Maps the petclinic dispatcher to *.htm. All handler mappings in - 
		opi-servlet.xml will by default be applied to this subpath. - If a mapping 
		isn't a /* subpath, the handler mappings are considered - relative to the 
		web app root. - - NOTE: A single dispatcher can be mapped to multiple paths, 
		like any servlet. -->
	<servlet-mapping>
		<servlet-name>opi</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>opi</servlet-name>
		<url-pattern>*.pdf</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<welcome-file-list>
		<!-- Redirects to "logon.htm" for dispatcher handling -->
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page>

	<filter>
		<filter-name>DisableUrlSessionFilter</filter-name>
		<filter-class>
			com.ubs.opi.web.filter.DisableUrlSessionFilter
		</filter-class>
	</filter>

	<filter>
		<filter-name>securityFilterChainProxy</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>DisableUrlSessionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>securityFilterChainProxy</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- - Reference to Opi database. -->
	<resource-ref>
		<res-ref-name>jdbc/spo</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
</web-app>
